name: Build and Deploy FastAPI App to AWS ECR

# on:
#   push:
#     branches:
#       - main

on: [push]


env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY_URI: ${{ secrets.ECR_REGISTRY_URI }}  # <AWS_ACCOUNT_ID>.dkr.ecr.<AWS_REGION>.amazonaws.com
  ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
  ECR_IMAGE_NAME: ${{ secrets.ECR_IMAGE_NAME }}
  ECR_IMAGE_TAG: latest
  LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Push Docker image to ECR
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REGISTRY_URI: ${{ env.ECR_REGISTRY_URI }}
          IMAGE_NAME: ${{ env.ECR_IMAGE_NAME }}
          IMAGE_TAG: ${{ env.ECR_IMAGE_TAG }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URI

          docker build -t $ECR_REGISTRY_URI/$IMAGE_NAME:$IMAGE_TAG .

          docker push $ECR_REGISTRY_URI/$IMAGE_NAME:$IMAGE_TAG

      # - name: Redeploy Lambda function
      #   env:
      #     AWS_REGION: ${{ env.AWS_REGION }}
      #     FUNCTION_NAME: ${{ env.LAMBDA_FUNCTION_NAME }}
      #     ECR_REGISTRY_URI: ${{ env.ECR_REGISTRY_URI }}
      #     IMAGE_NAME: ${{ env.ECR_IMAGE_NAME }}
      #     IMAGE_TAG: latest
      #   run: |
      #     aws lambda update-function-code \
      #       --function-name $FUNCTION_NAME \
      #       --image-uri $ECR_REGISTRY_URI/$IMAGE_NAME:$IMAGE_TAG \
      #       --region $AWS_REGION

      #     aws lambda wait function-updated --function-name $FUNCTION_NAME

      - name: Remove obsolete untagged ECR images
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          IMAGE_NAME: ${{ env.ECR_IMAGE_NAME }}
        run: |
          IMAGES_TO_DELETE=$( 
            aws ecr list-images \
              --region $AWS_REGION \
              --repository-name $ECR_REPO_NAME \
              --filter "tagStatus=UNTAGGED" \
              --query 'imageIds[*]' \
              --output json )
          
          for image in $(echo $IMAGES_TO_DELETE | jq -c '.[]'); do
            imageDigestId=$(echo "${image}" | jq '.imageDigest')
            echo "Deleting image: $imageDigestId"
            aws ecr batch-delete-image \
              --region $AWS_REGION \
              --repository-name $ECR_REPO_NAME \
              --image-ids imageDigest="$imageDigestId" || true            
          done             